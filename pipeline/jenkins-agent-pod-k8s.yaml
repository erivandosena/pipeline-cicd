##
#  Author: Erivando Sena
#  Date: 2023-02-27 06:53:33 +0000 (Seg, 25 Feb 2023)
#
#  vim:ts=2:sts=2:sw=2:et
#  lint: k8s
#
#  https://github.com/erivandosena/pipeline-cicd
#
#  License: veja o arquivo de LICENSE que acompanha
#
#  Se você estiver usando meu código, sinta-se à vontade para se conectar comigo no meu Blog, opcionalmente, enviar-me comentários para ajudar a orientar este ou outro código que eu publicar
#
#  http://www.erivandosena.com.br/
#

# ============================================================================ #
#                          J e n k i n s   C I   P o d
# ============================================================================ #

# veja o modelo Jenkinsfile referenciando este modelo de pod:
#
#   https://github.com/erivandosena/pipeline-cicd/tree/main/pipeline
---
apiVersion: v1
kind: Pod
metadata:
  # O nome não é realmente necessário, mas é uma solução alternativa (workaround) para as regras de datree's que não estão funcionando de outra forma: https://github.com/datreeio/datree/issues/730
  name: jenkins-agent-inbound
  namespace: jenkins
  labels:
    app: jenkins-agent-inbound
  annotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
    datree.skip/CONTAINERS_MISSING_READINESSPROBE_KEY: readiness probe não é relevante para contêineres de shell CI/CD CLI
    datree.skip/CONTAINERS_MISSING_LIVENESSPROBE_KEY: liveness probe não é relevante para contêineres de shell CI/CD CLI
spec:
  priorityClassName: high-priority-apps  # requer priorityclass.yaml
  affinity:
    # Evite preempção que pode causar falhas de build
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #       - matchExpressions:
    #           - key: cloud.google.com/gke-preemptible
    #             operator: DoesNotExist
    #           - key: eks.amazonaws.com/capacityType
    #             operator: NotIn
    #             values:
    #               - SPOT
    #           - key: kubernetes.azure.com/scalesetpriority
    #             operator: NotIn
    #             values:
    #               - spot
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            topologyKey: topology.kubernetes.io/zone
            labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - jenkins-agent
        - weight: 100
          podAffinityTerm:
            topologyKey: kubernetes.io/hostname
            labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - jenkins-agent
  # Necessário para o conteiner argocd para /home/jenkins/agent/workspace/<pipline>@tmp/durable-888973f9/jenkins-log.txt, caso contrário, permissão negada
  securityContext:
    runAsUser: 0
  containers:  # lista de contêineres que deseja apresentar para o build, pode-se definir um contêiner padrão no Jenkinsfile
    # ==================================================
    # https://cloud.google.com/sdk/docs/downloads-docker
    # https://hub.docker.com/r/google/cloud-sdk/
    - name: gcloud-sdk  # Não nomeie este 'jnlp', sem esse contêiner, isso nunca aparecerá corretamente para executar a build
      image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
      imagePullPolicy: Always
      # funciona sem isso
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 300m  # Na verdade, leva 800m, mas sobreconte, em vez de gerar muitos nós para uma workload estourada
          memory: 300Mi # usa cerca de 250Mi
        limits:
          cpu: "1"
          memory: 1Gi
    # ==================================================
    # https://hub.docker.com/r/amazon/aws-cli
    - name: aws-cli
      image: amazon/aws-cli:2.4.7
      #imagePullPolicy: Always
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 300m
          memory: 300Mi
        limits:
          cpu: "1"
          memory: 1Gi
    # ==================================================
    # https://hub.docker.com/r/stedolan/jq
    - name: jq
      image: stedolan/jq
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 100m
          memory: 50Mi
        limits:
          cpu: 500m
          memory: 500Mi
    # ==================================================
    # Skaffold - ferramenta de automação CI/CD CLI - também contém jq
    #
    # pode encontrar versões disponíveis usando a ferramenta no DevOps Python Tools Repo (https://github.com/harisekhon/devops-python-tools):
    #
    #   docker_registry_show_tags.py -H gcr.io -P 443 -S k8s-skaffold/skaffold
    #
    # O mais recente v1.41.0 parece à frente da versão divulgada v1.27.0, o que provavelmente é mais estável:
    #
    # https://github.com/googleContainerTools/skaffold/releases
    
    - name: skaffold
      image: gcr.io/k8s-skaffold/skaffold:v1.27.0
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 100m
          memory: 50Mi
        limits:
          cpu: 500m
          memory: 500Mi
    # ==================================================
    # https://hub.docker.com/r/argoproj/argocd
    # Argocd - para integrar Jenkins CI -> Argocd via sync deployment call - https://argoproj.github.io/argo-cd/user-guide/ci_automation/#synchronize-the-app-optional
    - name: argocd
      image: argoproj/argocd:v2.0.3
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 100m
          memory: 50Mi
        limits:
          cpu: 500m
          memory: 500Mi
    # ==================================================
    # https://hub.docker.com/r/harisekhon/git-kustomize
    # Para Gitopsk8Supdate Jenkins compartilhou a library em https://github.com/HariSekhon/Templates/blob/master/vars/gitOpsK8sUpdate.groovy
    - name: git-kustomize
      image: harisekhon/git-kustomize:latest
      imagePullPolicy: Always
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 100m
          memory: 50Mi
        limits:
          cpu: 500m
          memory: 500Mi
    # ==================================================
    # https://hub.docker.com/r/hashicorp/terraform
    - name: terraform
      image: hashicorp/terraform:1.1.2  # XXX: Definir para corresponder à versão Terraform que precisar
      #imagePullPolicy: Always
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 100m
          memory: 50Mi
        limits:
          cpu: 500m
          memory: 500Mi
    # ==================================================
    # https://hub.docker.com/r/alpine/terragrunt
    - name: terragrunt
      image: alpine/terragrunt:1.1.2  # XXX: Definir para corresponder à versão Terraform que precisar
      #imagePullPolicy: Always
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 100m
          memory: 50Mi
        limits:
          cpu: 500m
          memory: 500Mi
    # ==================================================
    # https://jfrog.com/getcli/
    - name: jfrog-cli
      image: releases-docker.jfrog.io/jfrog/jfrog-cli-v2:2.10.1
      #imagePullPolicy: Always
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 100m
          memory: 50Mi
        limits:
          cpu: 500m
          memory: 500Mi
    # ==================================================
    # https://hub.docker.com/r/aquasec/tfsec
    - name: tfsec
      #image: aquasec/tfsec:v0.63
      #image: aquasec/tfsec-ci:latest  # Sem entrada, as mesmas tags de versão que aquasec/tfsec
      image: aquasec/tfsec:latest      # O TFSEC-CI não é necessário, pois o ponto de entrada é substituído pelo CAT para permitir a execução do contêiner em etapas de pipeline
      imagePullPolicy: Always
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 50m
          memory: 50Mi
        limits:
          cpu: 500m
          memory: 200Mi
    # ==================================================
    # https://semgrep.dev/
    - name: semgrep
      image: returntocorp/semgrep-agent:v1
      imagePullPolicy: Always
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 50m
          memory: 50Mi
        limits:
          cpu: 500m
          memory: 200Mi
    # ==================================================
    # https://hub.docker.com/r/aquasec/trivy
    - name: trivy
      #image: aquasec/trivy:0.22.0
      image: aquasec/trivy:latest
      imagePullPolicy: Always
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 50m
          memory: 50Mi
        limits:
          cpu: 500m
          memory: 200Mi
    # ==================================================
    # https://hub.docker.com/r/bridgecrew/checkov
    - name: checkov
      #image: bridgecrew/checkov:2.0.715
      image: bridgecrew/checkov:latest
      imagePullPolicy: Always
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 50m
          memory: 50Mi
        limits:
          cpu: 500m
          memory: 200Mi
    # ==================================================
    # https://hub.docker.com/r/checkmarx/kics
    - name: kics
      #image: checkmarx/kics:v1.5.0
      image: checkmarx/kics:latest
      imagePullPolicy: Always
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 50m
          memory: 50Mi
        limits:
          cpu: 500m
          memory: 200Mi
    # ==================================================
    # https://hub.docker.com/r/liquibase/liquibase
    - name: liquibase
      #image: liquibase/liquibase:4.6
      image: liquibase/liquibase:latest
      imagePullPolicy: Always
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 50m
          memory: 50Mi
        limits:
          cpu: 500m
          memory: 200Mi
    # ==================================================
    # https://hub.docker.com/_/busybox
    # Conteiner genérico da CLI
    - name: busybox
      #image: busybox:3
      image: busybox:latest
      imagePullPolicy: Always
      command:
        - cat
      tty: true
      resources:
        requests:
          cpu: 50m
          memory: 50Mi
        limits:
          cpu: 200m
          memory: 200Mi
    # ==================================================
    # https://hub.docker.com/_/golang
    #- name: golang
    #  image: golang:1.10
    #  command:
    #    - cat
    #  tty: true
    # ==================================================
    # https://github.com/megalinter/megalinter
    # https://hub.docker.com/r/megalinter/megalinter
    # Conteiner genérico da CLI
    - name: megalinter
      image: megalinter/megalinter:v5
      imagePullPolicy: Always
      command:
        - cat
      env:
        - name: VALIDATE_ALL_CODEBASE
          value: 'true'
      tty: true
      resources:
        requests:
          cpu: 50m
          memory: 50Mi
        limits:
          cpu: 200m
          memory: 200Mi
      volumeMounts:
        #- mountPath: /home/jenkins/agent
        - mountPath: /tmp/lint
          name: workspace-volume
          readOnly: false
          
          
    # ==================================================
    # https://hub.docker.com/_/maven/tags
    - name: maven
      image: erivando/maven:3.9.0-openjdk-11 # imagem customizada
      command: ["tail", "-f", "/dev/null"]  # este ou qualquer comando que seja basicamente um noop é necessário, isso é para que não substitua o ponto de entrada do contêiner base
      imagePullPolicy: Always # use o cache ou puxe a imagem para o agente
      resources:  # limites e recursos que o build contém
        requests:
          cpu: "250m"
          memory: "512Mi"
        limits:
          cpu: "5000m"
          memory: "3Gi"
    # ==================================================
    # https://docs.docker.com/engine/release-notes/20.10/
    - name: docker
      image: docker:20.10.23-cli #dti-registro.unilab.edu.br/unilab/docker:latest
      command: ["tail", "-f", "/dev/null"]
      imagePullPolicy:  Always
      resources:
        requests:
          cpu: "250m"
          memory: "256Mi"
        limits:
          cpu: "350m"
          memory: "1Gi"
      volumeMounts:
        - name: docker
          mountPath: /var/run/docker.sock # Usao do mecanismo do docker do host k8s
  volumes:
    - name: docker
      hostPath:
        path: /var/run/docker.sock
