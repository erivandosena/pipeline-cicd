#!/usr/bin/env groovy

pipeline {
  agent {
    kubernetes {
      yamlFile './pipeline/jenkins-agent-pod-k8s.yaml'
      inheritFrom 'jnlp'
      idleMinutes 5
      defaultContainer 'maven'
    }
  }
  options {
    timestamps()
    timeout(time: 2, unit: 'HOURS')
    parallelsAlwaysFailFast()
    rateLimitBuilds(throttle: [count: 3, durationName: 'minute', userBoost: false])
    buildDiscarder(logRotator(numToKeepStr: '100'))
    //gitLabConnection('Gitlab')
    //gitlabCommitStatus(name: "Jenkins build $BUILD_DISPLAY_NAME")
    ansiColor('xterm')
  }
  triggers {
    // substitir 0 por H (hash) para randomizar começa a espalhar a carga e evitar picos
    //pollSCM('H/60 * * * *')  // execute a cada 60 minutos, em um tempo de deslocamento consistente dentro desse intervalo de 60 minutos
    cron('H 10 * * 1-5')  // executar às 10: XX:XX da manhã todos os dias da semana, ou seja. algum horário fixo de trabalho entre 10-11am
  }
  environment {
    APP_NAME = "app-sample"
    APP_VERSION = "1.0.0"
    APP_NAMESPACE = "app-sample"
    //DOCKER_TAG = "$GIT_COMMIT" // ou "$GIT_BRANCH"
    DOCKER_TAG = "${env.GIT_BRANCH.split('/')[-1]}"  //retire a 'origin/' inicial de 'origin/branch'
    DOCKER_IMAGE = "unlb/${APP_NAME}"
    BUILD_NUMBER = "${env.BUILD_NUMBER}"
    /*
    se criar imagens docker em agentes, isso habilita o BuildKit, que cria automaticamente camadas de imagens em paralelo sempre que possível 
    (especialmente útil para compilações de vários estágios) adicionar também '--build-arg BUILDKIT_INLINE_CACHE=1' ao comando docker build
    */
    DOCKER_BUILDKIT = 1
    TF_IN_AUTOMATION = 1 // altera a saída para suprimir as sugestões da CLI para comandos relacionados
    THREAD_COUNT = 6
    //SLACK_MESSAGE = "Pipeline <${env.JOB_DISPLAY_URL}|${env.JOB_NAME}> - <${env.RUN_DISPLAY_URL}|Build #${env.BUILD_NUMBER}>"
    // Altera o tempo limite do trabalho (o padrão é 1800 segundos; defina como 0 para desabilitar
    SEMGREP_TIMEOUT = "300"
    SONAR_HOST_URL = "https://dti-sonar.unilab.edu.br"
  }
  stages {
    stage('CI/CD Initialize Setup') {
      steps {  // nenhuma diretiva de conteiner é necessária para o container maven, porque ele é padrão.
        milestone(ordinal: null, label: "Milestone: Setup")
        script {
          // reescreve o nome da compilação para incluir o ID do commit
          currentBuild.displayName = "$BUILD_DISPLAY_NAME (${GIT_COMMIT.take(8)})"
          // salvar o caminho da área de trabalho para usar nos testes
          workspace = "$env.WORKSPACE"
        }
        // executar alguns comandos shell para configurar outros detalhes
        sh 'ls -la .'
        //sh 'apt-get update && apt-get install -y openssh-client rsync'
        // setup ssh inbound-agent
        //sh 'cat /etc/resolv.conf'
        //sh 'sed -i "s/#Port 22/Port 22/g" /etc/ssh/sshd_config'
        //sh 'sed -i "s/#PasswordAuthentication yes/PasswordAuthentication no/g" /etc/ssh/sshd_config'
        //sh 'ssh-keygen -t rsa -b 4096 -C "inbound-agent@noreply.unilab.edu.br" -f ~/.ssh/id_rsa -q -N ""'
        //sh '[ -d ~/.ssh ] || mkdir -p ~/.ssh && cp -rfv pipeline/.ssh-inbound-agent/id_rsa.pub ~/.ssh/ && chmod -R 600 ~/.ssh'
        sh 'printenv'
      }
    }
    // geralmente não é necessário ao obter o Jenkinsfile do Git SCM no Pipeline / Multibranch Pipeline, isso está implícito
    stage ('Checkout') {
      steps {
        milestone(ordinal: null, label: "Milestone: Checkout")
        checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/erivandosena/pipeline-cicd']]])
      }
    }
    stage('Build') {
      steps {
        echo "2. Build Application"
        /*
        sh "mvn clean package"
        sh "mvn clean verify"
        sh 'mvn clean -f spring-boot/'
        */
        //sh 'mvn org.apache.maven.plugins:maven-dependency-plugin:3.5.0:tree -f spring-boot/'
        sh 'mvn package install -Dmaven.test.skip=true -Dmy.variable=${APP_NAME} -Dmy.variable=${APP_VERSION} -f spring-boot/'
        //sh "mvn archetype:generate -DgroupId=br.edu.unilab.app -DartifactId=${APP_NAME} -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false -Dmy.variable=${APP_NAME} -Dmy.variable=${APP_VERSION}"
        /*
        sshagent (credentials: ['ssh-agent-root']) {
          //sh 'rsync -e "ssh -p 22 -o StrictHostKeyChecking=no" --recursive -arPo spring-boot/target/${APP_NAME}-${APP_VERSION}-SNAPSHOT.jar root@10.130.1.104:/tmp/'
          //sh 'mkdir -p /root/.ssh && touch /root/.ssh/known_hosts'
          //sh 'ssh-keyscan -p 22 -4 -H 10.130.1.104 >> ~/.ssh/known_hosts'
          sh 'ssh -T root@10.130.1.104'
          //sh 'rsync -e "ssh -p 22" --recursive -arvPo spring-boot/target/${APP_NAME}-${APP_VERSION}-SNAPSHOT.jar jenkins@10.130.1.104:/tmp/'
          //sh 'scp -pqr spring-boot/target/${APP_NAME}-${APP_VERSION}-SNAPSHOT.jar jenkins@10.130.1.104:/tmp/'
        }
        */
      }
    }
    stage('Build Docker Image') {
      steps {
        echo "3. Build of Image"
        container('docker') {  
          milestone(ordinal: null, label: "Milestone: Docker Build")
          timeout(time: 60, unit: 'MINUTES') {
            // verificar se 'DOCKER_BUILDKIT = 1' está definido na seção environment {}
            sh "docker build -f spring-boot/Dockerfile -t 'unlb/spring-boot:$DOCKER_TAG' --build-arg='NAME=$APP_NAME' --build-arg='VERSION=$APP_VERSION' --build-arg='COMMIT_SHA=$GIT_COMMIT' --build-arg='BUILDKIT_INLINE_CACHE=1' --cache-from 'unlb/spring-boot:$DOCKER_TAG' spring-boot/"
            sh "docker build -f angular/Dockerfile -t 'unlb/angular:$DOCKER_TAG' --build-arg='VERSION=$APP_VERSION' --build-arg='COMMIT_SHA=$GIT_COMMIT' --build-arg='BUILDKIT_INLINE_CACHE=1' --cache-from 'unlb/angular:$DOCKER_TAG' angular/"
          }
        }
      }
    }
    stage('Docker Push Image') {
      steps {
        echo "4. Push of Image"
        container('docker') { 
          withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
            sh "docker login -u ${dockerHubUser} -p ${dockerHubPassword}"
            milestone(ordinal: null, label: "Milestone: Docker Push")
            timeout(time: 15, unit: 'MINUTES') {
              sh "docker push 'unlb/spring-boot:$DOCKER_TAG'"
              sh "docker push 'unlb/angular:$DOCKER_TAG'"
            }
          }
        }
      }
    }
    stage('Deploy') {
      steps {
        echo "5. Deploy to K8S Cluster"
          sh "sed -i 's/<APP_NAMESPACE>/${env.APP_NAMESPACE}/' ./kubernetes/k8s.yaml"
          sh "sed -i 's/<APP_NAME>/${env.APP_NAME}/' ./kubernetes/k8s.yaml"
          sh "sed -i 's/<IMAGE_TAG>/unlb\\/angular:${env.DOCKER_TAG}/' ./kubernetes/k8s.yaml"
        
          // Oficial docs https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/
          sh 'curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"'
          sh 'curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"'
          sh 'echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check'
          sh "chmod u+x ./kubectl"
          sh "install -o root -g root -m 0755 kubectl /usr/bin/kubectl"
          sh "kubectl version --client -ojson" // apenas para testar a conexão client
        
          withKubeConfig([credentialsId: 'K8s-c1-config', serverUrl: 'https://10.130.0.45:6443']) {
            /*
            Teoricamente --record não é obrigatório, porém, tecnicamente torna-se obrigatório para garantir que as 
            alterações deixem um rastro de auditoria rudimentar e cumpram o processo SRE e a cultura DevOps.
            Exemplo de uso: kubectl rollout history -n docker deployment.apps/docker
            Nota: Quando --record não é sinalizador, na tabela, CHANGE-CAUSE estará apenas <none>
            */
            script {
                try {
                    sh 'kubectl get namespace $APP_NAMESPACE'
                    sh 'kubectl delete -f ./kubernetes/k8s.yaml'
                    sh 'kubectl apply -f ./kubernetes/k8s.yaml --record'
                } catch (err) {
                    sh 'kubectl apply -f ./kubernetes/k8s.yaml --record'
                } finally {
                    sh 'kubectl get all,ing -n $APP_NAMESPACE'
                }
            }
        }
      }
    }
  }
}
